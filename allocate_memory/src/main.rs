// Importing the `windows` crate for WinAPI integration
use windows::Win32::System::Memory::{VirtualAlloc, VirtualFree, MEM_COMMIT, PAGE_READWRITE};

/*
Documentation:
    - https://doc.rust-lang.org/std/thread/index.html
    - https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html
 */

// Function that makes the program wait for 10 seconds before closing
fn wait() {
    // Integrate the sleep function for the current thread (the thread that this program will be running on)
    std::thread::sleep(std::time::Duration::from_secs(10));
    println!(">> Sleeping Done!\n");
}

// Allocate memory for 30 integers (4 bytes each)
// Function that returns the result value
fn run() -> windows_core::Result<()> {
    // Calculate the size of memory needed for 30 integers (each taking 4 bytes)
    let size = std::mem::size_of::<i32>() * 30;
    // Use unsafe block to call Windows API function VirtualAlloc to allocate memory
    let mem_ptr = unsafe {
        VirtualAlloc(
            None,           // Passing None to represents NULL
            size as usize,  // Size of memory to be allocated
            MEM_COMMIT,     // Commit the memory, making it available for use
            PAGE_READWRITE, // Set the memory protection to allow reading and writing
        )
    };

    // Check if the memory allocation succeeded
    let mem_ptr = if mem_ptr.is_null() {
        // If allocation failed, retrieve the last WinAPI error and return an error result
        let last_error = windows::core::Error::from_win32();
        return Err(last_error);
    } else {
        // If allocation succeeded, store the memory pointer
        mem_ptr
    };

    // Access the allocated memory as a mutable slice of 30 integers
    let data: &mut [i32] = unsafe { std::slice::from_raw_parts_mut(mem_ptr as *mut i32, 30) };

    // Initialize the allocated memory with values from 0 to 29
    for i in 0..30 {
        data[i] = i as i32;
    }

    // Print the memory address where the allocation occurred
    println!("Memory Address: {:?}", mem_ptr);

    // Free the allocated memory using the VirtualFree WinAPI function
    let _result = unsafe { VirtualFree(mem_ptr, 0, windows::Win32::System::Memory::MEM_RELEASE) ?};
    Ok(()) // Return Ok(()) when freeing the memory is successful
}

// Main function that executes the program
fn main() {
    // Call the run function and handle any errors that may occur
    if let Err(err) = run() {
        eprintln!("Error: {:?}", err);
    }

    // Call the wait function to make the program sleep for 10 seconds before closing
    wait()
}
