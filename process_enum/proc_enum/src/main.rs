// Import the File struct from the std::fs module to work with files.
use std::fs::File;
// Import the Write trait from the std::io module for writing to files.
use std::io::{Write};
// Import the Command struct from the std::process module to spawn external processes.
use std::process::{Command, exit};

fn main() {
    // Use the `tasklist` command on Windows to list processes.
    let output = Command::new("tasklist")
        // Collect the output of the tasklist command.
        .output()
        // Print an error message if the command execution fails.
        .expect("[!] Failed to execute tasklist command");

    // Check if the command was successful (returns true if successful, false otherwise).
    if !output.status.success() {
        // Print detailed error information using {:?} format specifier.
        eprintln!("Error: {:?}", output.status);
        // Exit the program with code 1 indicating an error.
        exit(1);
    }

    // Convert the output byte vector to a UTF-8 encoded string.
    // The output may contain non-UTF-8 data, but from_utf8_lossy() replaces invalid UTF-8 sequences with the Unicode replacement character.
    // https://doc.rust-lang.org/std/string/struct.String.html#method.from_utf8_lossy
    let output_str = String::from_utf8_lossy(&output.stdout);

    // Print the list of processes.
    println!("Processes: ");
    // for each process line inside
    // lines()      -> prints each line on a new line
    // skip(2)      -> Skips the first 2 lines (since that is the output that tasklist will generate and doesn't hold any processes)
    /*
    Line 1: Image Name                     PID Session Name        Session#    Mem Usage
    Line 2: ========================= ======== ================ =========== ============
     */
    for process_line in output_str.lines().skip(2) {
        // Defines vector string, dynamic array containing the references to string slices
        // split.whitespace()   -> Splits each line (string) when there is a space, tab, newline and returns iterator over these substrings
        // collect()            -> Collects the substrings and save into the vector which is then hold by the columns variable
        let columns: Vec<&str> = process_line.split_whitespace().collect();
        // Check if there are at least two columns (process name and process ID) are present.
        if columns.len() >= 2 {
            let process_name = columns[0];
            let process_id = columns[1];

            // Print the process name and ID.
            println!("PID: {}, Name: {}", process_id, process_name);
        }
    }

    // Save the output to a file.
    // Attempt to create the file at the specified location.
    // https://doc.rust-lang.org/core/result/enum.Result.html#variant.Ok
    if let Ok(mut file) = File::create("c:\\Users\\Public\\Documents\\process_list.txt") {
        // Write the process list to the file, handling any writing errors.
        if let Err(write_error) = writeln!(file, "{}", output_str) {
            eprintln!("Error writing to file: {}", write_error);
        }
    } else {
        // Print an error message if file creation fails.
        eprintln!("Error creating file process_list.txt");
    }
}